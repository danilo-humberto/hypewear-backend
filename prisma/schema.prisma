generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  produtos  Product[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  estoque     Int
  status      String
  imagem      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categoryId  String
  items       OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
}

model Client {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  password    String
  numberPhone String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  addresses   Address[]
  orders      Order[]
}

model Address {
  id          String   @id @default(uuid())
  cep         String
  logradouro  String
  numero      String
  complemento String
  bairro      String
  cidade      String
  estado      String
  clientId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDefault   Boolean  @default(true)
  client      Client   @relation(fields: [clientId], references: [id])
}

model Order {
  id            String         @id @default(uuid())
  clientId      String
  status        OrderStatus @default(ABERTO)
  total         Float       @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  client        Client      @relation(fields: [clientId], references: [id])
  payments      Payment?    @relation("OrderPayment")
  items         OrderItem[]
}

model OrderItem {
  id        String     @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Float
  total  Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  ABERTO
  AGUARDANDO_PAGAMENTO
  PAGO
  CANCELADO
}

model Payment {
  id        String              @id @default(uuid())
  orderId   String              @unique
  order     Order               @relation("OrderPayment", fields: [orderId], references: [id])
  method    PaymentMethodType
  status    PaymentStatusType   @default(PENDENTE)
  date      DateTime            @default(now())
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

enum PaymentMethodType {
  CARTAO
  BOLETO
  PIX
}

enum PaymentStatusType {
  PENDENTE
  PAGO
  CANCELADO
}
